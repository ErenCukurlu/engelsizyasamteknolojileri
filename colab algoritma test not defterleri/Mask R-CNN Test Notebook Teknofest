{"cells":[{"cell_type":"markdown","metadata":{"id":"lDPY30rSLhl6"},"source":["# Mask R-CNN"]},{"cell_type":"code","source":["!git clone https://github.com/matterport/Mask_RCNN\n","%cd Mask_RCNN\n","!pip install -r requirements.txt\n","!pip install tensorflow==1.13.1\n","!pip install keras==2.0.8\n","!pip install h5py==2.10.0\n","!python setup.py install"],"metadata":{"id":"0CpXjPWfLyLh"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Hs1MstnXLhmC"},"outputs":[],"source":["import os\n","import sys\n","import random\n","import math\n","import numpy as np\n","import skimage.io\n","import matplotlib\n","import matplotlib.pyplot as plt\n","\n","# Root directory of the project\n","ROOT_DIR = os.path.abspath(\"\")\n","\n","# Import Mask RCNN\n","sys.path.append(ROOT_DIR)  # To find local version of the library\n","from mrcnn import utils\n","import mrcnn.model as modellib\n","from mrcnn import visualize\n","# Import COCO config\n","sys.path.append(os.path.join(ROOT_DIR, \"samples/coco/\"))  # To find local version\n","import coco\n","\n","%matplotlib inline \n","\n","# Directory to save logs and trained model\n","MODEL_DIR = os.path.join(ROOT_DIR, \"logs\")\n","\n","# Local path to trained weights file\n","COCO_MODEL_PATH = os.path.join(ROOT_DIR, \"mask_rcnn_coco.h5\")\n","# Download COCO trained weights from Releases if needed\n","if not os.path.exists(COCO_MODEL_PATH):\n","    utils.download_trained_weights(COCO_MODEL_PATH)\n","\n","# Directory of images to run detection on\n","IMAGE_DIR = os.path.join(ROOT_DIR, \"images\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4l49g40ZLhmI"},"outputs":[],"source":["class InferenceConfig(coco.CocoConfig):\n","    # Set batch size to 1 since we'll be running inference on\n","    # one image at a time. Batch size = GPU_COUNT * IMAGES_PER_GPU\n","    GPU_COUNT = 1\n","    IMAGES_PER_GPU = 1\n","\n","config = InferenceConfig()\n","config.display()"]},{"cell_type":"code","execution_count":null,"metadata":{"scrolled":false,"id":"Uwd-DabaLhmK"},"outputs":[],"source":["# Create model object in inference mode.\n","model = modellib.MaskRCNN(mode=\"inference\", model_dir=MODEL_DIR, config=config)\n","\n","# Load weights trained on MS-COCO\n","model.load_weights(COCO_MODEL_PATH, by_name=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"id":"FiCPfwLVLhmN"},"outputs":[],"source":["# COCO Class names\n","# Index of the class in the list is its ID. For example, to get ID of\n","# the teddy bear class, use: class_names.index('teddy bear')\n","class_names = ['BG', 'person', 'bicycle', 'car', 'motorcycle', 'airplane',\n","               'bus', 'train', 'truck', 'boat', 'traffic light',\n","               'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird',\n","               'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear',\n","               'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie',\n","               'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball',\n","               'kite', 'baseball bat', 'baseball glove', 'skateboard',\n","               'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup',\n","               'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple',\n","               'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza',\n","               'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed',\n","               'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote',\n","               'keyboard', 'cell phone', 'microwave', 'oven', 'toaster',\n","               'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors',\n","               'teddy bear', 'hair drier', 'toothbrush']"]},{"cell_type":"code","execution_count":null,"metadata":{"scrolled":false,"id":"RBCYEqzhLhmQ"},"outputs":[],"source":["# Load a random image from the images folder\n","file_names = next(os.walk(IMAGE_DIR))[2]\n","image = skimage.io.imread(os.path.join(IMAGE_DIR, random.choice(file_names)))\n","\n","# Run detection\n","results = model.detect([image], verbose=1)\n","\n","# Visualize results\n","r = results[0]\n","visualize.display_instances(image, r['rois'], r['masks'], r['class_ids'], \n","                            class_names, r['scores'])"]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.2"},"colab":{"name":"Mask R-CNN Test Notebook Teknofest","provenance":[{"file_id":"https://github.com/matterport/Mask_RCNN/blob/master/samples/demo.ipynb","timestamp":1651788551545}]}},"nbformat":4,"nbformat_minor":0}